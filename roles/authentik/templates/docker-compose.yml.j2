version: '3.4'

services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
    env_file:
      - .env

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  server:
    image: {{ authentik_image }}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: {{ postgres_user }}
      AUTHENTIK_POSTGRESQL__NAME: {{ postgres_db }}
      AUTHENTIK_POSTGRESQL__PASSWORD: {{ postgres_password }}
      AUTHENTIK_SECRET_KEY: {{ secret_key }}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    ports:
      - "{{ authentik_port_http }}:9000"
      - "{{ authentik_port_https }}:9443"

  worker:
    image: {{ authentik_image }}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: {{ postgres_user }}
      AUTHENTIK_POSTGRESQL__NAME: {{ postgres_db }}
      AUTHENTIK_POSTGRESQL__PASSWORD: {{ postgres_password }}
      AUTHENTIK_SECRET_KEY: {{ secret_key }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates

volumes:
  database:
    driver: local
  redis:
    driver: local
